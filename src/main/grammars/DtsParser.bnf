{
    parserClass = "me.jkdhn.devicetree.parser.DtsParser"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
    psiClassPrefix = "Dts"
    psiImplClassSuffix = "Impl"
    psiPackage = "me.jkdhn.devicetree.psi"
    psiImplPackage = "me.jkdhn.devicetree.psi.impl"
    elementTypeHolderClass = "me.jkdhn.devicetree.psi.DtsTypes"
    elementTypeClass = "me.jkdhn.devicetree.psi.DtsElementType"
    tokenTypeClass = "me.jkdhn.devicetree.psi.DtsTokenType"
    psiImplUtilClass = "me.jkdhn.devicetree.psi.impl.DtsPsiImplUtil"
    parserUtilClass = "me.jkdhn.devicetree.parser.DtsParserUtil"
    tokens = [
        HEADER_V1 = "/dts-v1/"
        SEMICOLON = ";"
        PRE_IF = "#if"
        PRE_IFDEF = "#ifdef"
        PRE_IFNDEF = "#ifndef"
        PRE_ELIF = "#elif"
        PRE_ELSE = "#else"
        PRE_ENDIF = "#endif"
        PRE_INCLUDE = "#include"
        PRE_DEFINE = "#define"
        PRE_UNDEF = "#undef"
        PRE_LINE = "#line"
        PRE_ERROR = "#error"
        PRE_PRAGMA = "#pragma"
    ]
}

File ::= Statement*

Statement ::= ((HEADER_V1 | TreeNode | PropertyDefinition) SEMICOLON)

LabelDefinition ::= LABEL_NAME COLON {
    mixin = "me.jkdhn.devicetree.psi.impl.DtsNamedElementImpl"
    implements = "me.jkdhn.devicetree.psi.DtsNamedElement"
    methods = [
        getNameIdentifier
        getName
        setName
    ]
}

LabelReference ::= AMPERSAND LABEL_NAME {
    methods = [
        getReference
    ]
}

TreeNode ::= ((LabelDefinition* TreeNodeName) | LabelReference) BRACE_LEFT Statement* BRACE_RIGHT
TreeNodeName ::= NODE_NAME (AT UNIT_ADDRESS)?

PropertyDefinition ::= LabelDefinition* PROPERTY_NAME (EQ PropertyValue (COMMA PropertyValue)*)?
PropertyValue ::= LabelDefinition* (PropertyValueCell | LITERAL_STRING | LabelReference) LabelDefinition*
PropertyValueCell ::= CELL_BEGIN PropertyValueCellEntry* LabelDefinition* CELL_END
private PropertyValueCellEntry ::= LabelDefinition* (LabelReference | PropertyValueExpression)
PropertyValueExpression ::= CELL_INT | (PAR_LEFT CELL_INT PAR_RIGHT) | (PAR_LEFT PropertyValueExpression PropertyValueOperator PropertyValueExpression PAR_RIGHT)
PropertyValueOperator ::= CELL_ADD | CELL_SUB | CELL_MUL | CELL_DIV
