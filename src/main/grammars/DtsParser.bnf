{
    parserClass = "me.jkdhn.devicetree.parser.DtsParser"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
    psiClassPrefix = "Dts"
    psiImplClassSuffix = "Impl"
    psiPackage = "me.jkdhn.devicetree.psi"
    psiImplPackage = "me.jkdhn.devicetree.psi.impl"
    elementTypeHolderClass = "me.jkdhn.devicetree.psi.DtsTypes"
    elementTypeClass = "me.jkdhn.devicetree.psi.DtsElementType"
    tokenTypeClass = "me.jkdhn.devicetree.psi.DtsTokenType"
    psiImplUtilClass = "me.jkdhn.devicetree.psi.impl.DtsPsiImplUtil"
    parserUtilClass = "me.jkdhn.devicetree.parser.DtsParserUtil"
    tokens = [
        HEADER_V1 = "/dts-v1/"
        BRACE_LEFT = "{"
        BRACE_RIGHT = "}"
        PAR_LEFT = "("
        PAR_RIGHT = ")"
        LT = "<"
        GT = ">"
        SEMICOLON = ";"
        AT = "@"
        EQ = "="
        AMPERSAND = "&"
        COLON = ":"
        ADD = "+"
        SUB = "-"
        MUL = "*"
        SLASH = "/"
        STRING = "<string>"
        INTEGER = "<int>"
        IDENTIFIER = "<identifier>"
    ]
}

File ::= Statement*

Statement ::= ((HEADER_V1 | TreeNode | PropertyDefinition) SEMICOLON)

LabelDefinition ::= IDENTIFIER COLON {
    mixin = "me.jkdhn.devicetree.psi.impl.DtsNamedElementImpl"
    implements = "me.jkdhn.devicetree.psi.DtsNamedElement"
    methods = [
        getNameIdentifier
        getName
        setName
    ]
}

LabelReference ::= AMPERSAND IDENTIFIER {
    methods = [
        getReference
    ]
}

TreeNode ::= ((LabelDefinition* TreeNodeName) | LabelReference) BRACE_LEFT Statement* BRACE_RIGHT
TreeNodeName ::= IDENTIFIER | SLASH

PropertyDefinition ::= LabelDefinition* IDENTIFIER (EQ PropertyValue (COMMA PropertyValue)*)?
PropertyValue ::= LabelDefinition* (PropertyValueCell | STRING | LabelReference) LabelDefinition*
PropertyValueCell ::= LT PropertyValueCellEntry* LabelDefinition* GT
private PropertyValueCellEntry ::= LabelDefinition* (LabelReference | PropertyValueExpression)
PropertyValueExpression ::= INTEGER | (PAR_LEFT INTEGER PAR_RIGHT) | (PAR_LEFT PropertyValueExpression PropertyValueOperator PropertyValueExpression PAR_RIGHT)
PropertyValueOperator ::= ADD | SUB | MUL | SLASH
